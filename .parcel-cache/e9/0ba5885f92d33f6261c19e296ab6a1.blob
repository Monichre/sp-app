var $a8e58796379a148b906d1504b8f19$exports = {};
var $a8e58796379a148b906d1504b8f19$var$xtend = $parcel$require("278a8e58796379a148b906d1504b8f19", "xtend");
var $a8e58796379a148b906d1504b8f19$var$entities = $parcel$require("278a8e58796379a148b906d1504b8f19", "parse-entities");
$a8e58796379a148b906d1504b8f19$exports = $a8e58796379a148b906d1504b8f19$var$factory;
/* Factory to create an entity decoder. */

function $a8e58796379a148b906d1504b8f19$var$factory(ctx) {
  decoder.raw = decodeRaw;
  return decoder;
  /* Normalize `position` to add an `indent`. */

  function normalize(position) {
    var offsets = ctx.offset;
    var line = position.line;
    var result = [];

    while (++line) {
      if (!(line in offsets)) {
        break;
      }

      result.push((offsets[line] || 0) + 1);
    }

    return {
      start: position,
      indent: result
    };
  }
  /* Handle a warning.
   * See https://github.com/wooorm/parse-entities
   * for the warnings. */


  function handleWarning(reason, position, code) {
    if (code === 3) {
      return;
    }

    ctx.file.message(reason, position);
  }
  /* Decode `value` (at `position`) into text-nodes. */


  function decoder(value, position, handler) {
    $a8e58796379a148b906d1504b8f19$var$entities(value, {
      position: normalize(position),
      warning: handleWarning,
      text: handler,
      reference: handler,
      textContext: ctx,
      referenceContext: ctx
    });
  }
  /* Decode `value` (at `position`) into a string. */


  function decodeRaw(value, position, options) {
    return $a8e58796379a148b906d1504b8f19$var$entities(value, $a8e58796379a148b906d1504b8f19$var$xtend(options, {
      position: normalize(position),
      warning: handleWarning
    }));
  }
}