var $cde72f5eb1468c40b6cfbe27bd0187dd$exports = {};
var $cde72f5eb1468c40b6cfbe27bd0187dd$var$trim = $parcel$require("cde72f5eb1468c40b6cfbe27bd0187dd", "trim");
var $cde72f5eb1468c40b6cfbe27bd0187dd$var$decimal = $parcel$require("cde72f5eb1468c40b6cfbe27bd0187dd", "is-decimal");
var $cde72f5eb1468c40b6cfbe27bd0187dd$var$trimTrailingLines = $parcel$require("cde72f5eb1468c40b6cfbe27bd0187dd", "trim-trailing-lines");
var $cde72f5eb1468c40b6cfbe27bd0187dd$var$interrupt = $parcel$require("cde72f5eb1468c40b6cfbe27bd0187dd", "../util/interrupt");
$cde72f5eb1468c40b6cfbe27bd0187dd$exports = $cde72f5eb1468c40b6cfbe27bd0187dd$var$paragraph;
var $cde72f5eb1468c40b6cfbe27bd0187dd$var$C_NEWLINE = '\n';
var $cde72f5eb1468c40b6cfbe27bd0187dd$var$C_TAB = '\t';
var $cde72f5eb1468c40b6cfbe27bd0187dd$var$C_SPACE = ' ';
var $cde72f5eb1468c40b6cfbe27bd0187dd$var$TAB_SIZE = 4;
/* Tokenise paragraph. */

function $cde72f5eb1468c40b6cfbe27bd0187dd$var$paragraph(eat, value, silent) {
  var self = this;
  var settings = self.options;
  var commonmark = settings.commonmark;
  var gfm = settings.gfm;
  var tokenizers = self.blockTokenizers;
  var interruptors = self.interruptParagraph;
  var index = value.indexOf($cde72f5eb1468c40b6cfbe27bd0187dd$var$C_NEWLINE);
  var length = value.length;
  var position;
  var subvalue;
  var character;
  var size;
  var now;

  while (index < length) {
    /* Eat everything if thereâ€™s no following newline. */
    if (index === -1) {
      index = length;
      break;
    }
    /* Stop if the next character is NEWLINE. */


    if (value.charAt(index + 1) === $cde72f5eb1468c40b6cfbe27bd0187dd$var$C_NEWLINE) {
      break;
    }
    /* In commonmark-mode, following indented lines
     * are part of the paragraph. */


    if (commonmark) {
      size = 0;
      position = index + 1;

      while (position < length) {
        character = value.charAt(position);

        if (character === $cde72f5eb1468c40b6cfbe27bd0187dd$var$C_TAB) {
          size = $cde72f5eb1468c40b6cfbe27bd0187dd$var$TAB_SIZE;
          break;
        } else if (character === $cde72f5eb1468c40b6cfbe27bd0187dd$var$C_SPACE) {
          size++;
        } else {
          break;
        }

        position++;
      }

      if (size >= $cde72f5eb1468c40b6cfbe27bd0187dd$var$TAB_SIZE) {
        index = value.indexOf($cde72f5eb1468c40b6cfbe27bd0187dd$var$C_NEWLINE, index + 1);
        continue;
      }
    }

    subvalue = value.slice(index + 1);
    /* Check if the following code contains a possible
     * block. */

    if ($cde72f5eb1468c40b6cfbe27bd0187dd$var$interrupt(interruptors, tokenizers, self, [eat, subvalue, true])) {
      break;
    }
    /* Break if the following line starts a list, when
     * already in a list, or when in commonmark, or when
     * in gfm mode and the bullet is *not* numeric. */


    if (tokenizers.list.call(self, eat, subvalue, true) && (self.inList || commonmark || gfm && !$cde72f5eb1468c40b6cfbe27bd0187dd$var$decimal($cde72f5eb1468c40b6cfbe27bd0187dd$var$trim.left(subvalue).charAt(0)))) {
      break;
    }

    position = index;
    index = value.indexOf($cde72f5eb1468c40b6cfbe27bd0187dd$var$C_NEWLINE, index + 1);

    if (index !== -1 && $cde72f5eb1468c40b6cfbe27bd0187dd$var$trim(value.slice(position, index)) === '') {
      index = position;
      break;
    }
  }

  subvalue = value.slice(0, index);

  if ($cde72f5eb1468c40b6cfbe27bd0187dd$var$trim(subvalue) === '') {
    eat(subvalue);
    return null;
  }
  /* istanbul ignore if - never used (yet) */


  if (silent) {
    return true;
  }

  now = eat.now();
  subvalue = $cde72f5eb1468c40b6cfbe27bd0187dd$var$trimTrailingLines(subvalue);
  return eat(subvalue)({
    type: 'paragraph',
    children: self.tokenizeInline(subvalue, now)
  });
}