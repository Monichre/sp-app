var $da96c864e90ce1a9c0af1e5ad7a3fe2$exports = {};
const $da96c864e90ce1a9c0af1e5ad7a3fe2$var$strictUriEncode = $parcel$require("8da96c864e90ce1a9c0af1e5ad7a3fe2", "strict-uri-encode");
const $da96c864e90ce1a9c0af1e5ad7a3fe2$var$decodeComponent = $parcel$require("8da96c864e90ce1a9c0af1e5ad7a3fe2", "decode-uri-component");
const $da96c864e90ce1a9c0af1e5ad7a3fe2$var$splitOnFirst = $parcel$require("8da96c864e90ce1a9c0af1e5ad7a3fe2", "split-on-first");

function $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encoderForArrayFormat(options) {
  switch (options.arrayFormat) {
    case 'index':
      return key => (result, value) => {
        const index = result.length;

        if (value === undefined || options.skipNull && value === null) {
          return result;
        }

        if (value === null) {
          return [...result, [$da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(key, options), '[', index, ']'].join('')];
        }

        return [...result, [$da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(key, options), '[', $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(index, options), ']=', $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(value, options)].join('')];
      };

    case 'bracket':
      return key => (result, value) => {
        if (value === undefined || options.skipNull && value === null) {
          return result;
        }

        if (value === null) {
          return [...result, [$da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(key, options), '[]'].join('')];
        }

        return [...result, [$da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(key, options), '[]=', $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(value, options)].join('')];
      };

    case 'comma':
      return key => (result, value) => {
        if (value === null || value === undefined || value.length === 0) {
          return result;
        }

        if (result.length === 0) {
          return [[$da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(key, options), '=', $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(value, options)].join('')];
        }

        return [[result, $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(value, options)].join(',')];
      };

    default:
      return key => (result, value) => {
        if (value === undefined || options.skipNull && value === null) {
          return result;
        }

        if (value === null) {
          return [...result, $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(key, options)];
        }

        return [...result, [$da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(key, options), '=', $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(value, options)].join('')];
      };
  }
}

function $da96c864e90ce1a9c0af1e5ad7a3fe2$var$parserForArrayFormat(options) {
  let result;

  switch (options.arrayFormat) {
    case 'index':
      return (key, value, accumulator) => {
        result = /\[(\d*)\]$/.exec(key);
        key = key.replace(/\[\d*\]$/, '');

        if (!result) {
          accumulator[key] = value;
          return;
        }

        if (accumulator[key] === undefined) {
          accumulator[key] = {};
        }

        accumulator[key][result[1]] = value;
      };

    case 'bracket':
      return (key, value, accumulator) => {
        result = /(\[\])$/.exec(key);
        key = key.replace(/\[\]$/, '');

        if (!result) {
          accumulator[key] = value;
          return;
        }

        if (accumulator[key] === undefined) {
          accumulator[key] = [value];
          return;
        }

        accumulator[key] = [].concat(accumulator[key], value);
      };

    case 'comma':
      return (key, value, accumulator) => {
        const isArray = typeof value === 'string' && value.split('').indexOf(',') > -1;
        const newValue = isArray ? value.split(',') : value;
        accumulator[key] = newValue;
      };

    default:
      return (key, value, accumulator) => {
        if (accumulator[key] === undefined) {
          accumulator[key] = value;
          return;
        }

        accumulator[key] = [].concat(accumulator[key], value);
      };
  }
}

function $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(value, options) {
  if (options.encode) {
    return options.strict ? $da96c864e90ce1a9c0af1e5ad7a3fe2$var$strictUriEncode(value) : encodeURIComponent(value);
  }

  return value;
}

function $da96c864e90ce1a9c0af1e5ad7a3fe2$var$decode(value, options) {
  if (options.decode) {
    return $da96c864e90ce1a9c0af1e5ad7a3fe2$var$decodeComponent(value);
  }

  return value;
}

function $da96c864e90ce1a9c0af1e5ad7a3fe2$var$keysSorter(input) {
  if (Array.isArray(input)) {
    return input.sort();
  }

  if (typeof input === 'object') {
    return $da96c864e90ce1a9c0af1e5ad7a3fe2$var$keysSorter(Object.keys(input)).sort((a, b) => Number(a) - Number(b)).map(key => input[key]);
  }

  return input;
}

function $da96c864e90ce1a9c0af1e5ad7a3fe2$var$removeHash(input) {
  const hashStart = input.indexOf('#');

  if (hashStart !== -1) {
    input = input.slice(0, hashStart);
  }

  return input;
}

function $da96c864e90ce1a9c0af1e5ad7a3fe2$var$extract(input) {
  input = $da96c864e90ce1a9c0af1e5ad7a3fe2$var$removeHash(input);
  const queryStart = input.indexOf('?');

  if (queryStart === -1) {
    return '';
  }

  return input.slice(queryStart + 1);
}

function $da96c864e90ce1a9c0af1e5ad7a3fe2$var$parseValue(value, options) {
  if (options.parseNumbers && !Number.isNaN(Number(value)) && typeof value === 'string' && value.trim() !== '') {
    value = Number(value);
  } else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {
    value = value.toLowerCase() === 'true';
  }

  return value;
}

function $da96c864e90ce1a9c0af1e5ad7a3fe2$var$parse(input, options) {
  options = Object.assign({
    decode: true,
    sort: true,
    arrayFormat: 'none',
    parseNumbers: false,
    parseBooleans: false
  }, options);
  const formatter = $da96c864e90ce1a9c0af1e5ad7a3fe2$var$parserForArrayFormat(options); // Create an object with no prototype

  const ret = Object.create(null);

  if (typeof input !== 'string') {
    return ret;
  }

  input = input.trim().replace(/^[?#&]/, '');

  if (!input) {
    return ret;
  }

  for (const param of input.split('&')) {
    let [key, value] = $da96c864e90ce1a9c0af1e5ad7a3fe2$var$splitOnFirst(options.decode ? param.replace(/\+/g, ' ') : param, '='); // Missing `=` should be `null`:
    // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters

    value = value === undefined ? null : $da96c864e90ce1a9c0af1e5ad7a3fe2$var$decode(value, options);
    formatter($da96c864e90ce1a9c0af1e5ad7a3fe2$var$decode(key, options), value, ret);
  }

  for (const key of Object.keys(ret)) {
    const value = ret[key];

    if (typeof value === 'object' && value !== null) {
      for (const k of Object.keys(value)) {
        value[k] = $da96c864e90ce1a9c0af1e5ad7a3fe2$var$parseValue(value[k], options);
      }
    } else {
      ret[key] = $da96c864e90ce1a9c0af1e5ad7a3fe2$var$parseValue(value, options);
    }
  }

  if (options.sort === false) {
    return ret;
  }

  return (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {
    const value = ret[key];

    if (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {
      // Sort object keys, not values
      result[key] = $da96c864e90ce1a9c0af1e5ad7a3fe2$var$keysSorter(value);
    } else {
      result[key] = value;
    }

    return result;
  }, Object.create(null));
}

var $da96c864e90ce1a9c0af1e5ad7a3fe2$export$extract = $da96c864e90ce1a9c0af1e5ad7a3fe2$var$extract;
$da96c864e90ce1a9c0af1e5ad7a3fe2$exports.extract = $da96c864e90ce1a9c0af1e5ad7a3fe2$export$extract;
var $da96c864e90ce1a9c0af1e5ad7a3fe2$export$parse = $da96c864e90ce1a9c0af1e5ad7a3fe2$var$parse;
$da96c864e90ce1a9c0af1e5ad7a3fe2$exports.parse = $da96c864e90ce1a9c0af1e5ad7a3fe2$export$parse;

var $da96c864e90ce1a9c0af1e5ad7a3fe2$export$stringify = (object, options) => {
  if (!object) {
    return '';
  }

  options = Object.assign({
    encode: true,
    strict: true,
    arrayFormat: 'none'
  }, options);
  const formatter = $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encoderForArrayFormat(options);
  const objectCopy = Object.assign({}, object);

  if (options.skipNull) {
    for (const key of Object.keys(objectCopy)) {
      if (objectCopy[key] === undefined || objectCopy[key] === null) {
        delete objectCopy[key];
      }
    }
  }

  const keys = Object.keys(objectCopy);

  if (options.sort !== false) {
    keys.sort(options.sort);
  }

  return keys.map(key => {
    const value = object[key];

    if (value === undefined) {
      return '';
    }

    if (value === null) {
      return $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(key, options);
    }

    if (Array.isArray(value)) {
      return value.reduce(formatter(key), []).join('&');
    }

    return $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(key, options) + '=' + $da96c864e90ce1a9c0af1e5ad7a3fe2$var$encode(value, options);
  }).filter(x => x.length > 0).join('&');
};

$da96c864e90ce1a9c0af1e5ad7a3fe2$exports.stringify = $da96c864e90ce1a9c0af1e5ad7a3fe2$export$stringify;

var $da96c864e90ce1a9c0af1e5ad7a3fe2$export$parseUrl = (input, options) => {
  return {
    url: $da96c864e90ce1a9c0af1e5ad7a3fe2$var$removeHash(input).split('?')[0] || '',
    query: $da96c864e90ce1a9c0af1e5ad7a3fe2$var$parse($da96c864e90ce1a9c0af1e5ad7a3fe2$var$extract(input), options)
  };
};

$da96c864e90ce1a9c0af1e5ad7a3fe2$exports.parseUrl = $da96c864e90ce1a9c0af1e5ad7a3fe2$export$parseUrl;