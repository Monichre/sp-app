var $c6290bbcadbc0f72b53ae3f65e3$exports = {};
var $c6290bbcadbc0f72b53ae3f65e3$var$xtend = $parcel$require("00812c6290bbcadbc0f72b53ae3f65e3", "xtend");
var $c6290bbcadbc0f72b53ae3f65e3$var$inherits = $parcel$require("00812c6290bbcadbc0f72b53ae3f65e3", "inherits");
$c6290bbcadbc0f72b53ae3f65e3$exports = $c6290bbcadbc0f72b53ae3f65e3$var$unherit; // Create a custom constructor which can be modified without affecting the
// original class.

function $c6290bbcadbc0f72b53ae3f65e3$var$unherit(Super) {
  var result;
  var key;
  var value;
  $c6290bbcadbc0f72b53ae3f65e3$var$inherits(Of, Super);
  $c6290bbcadbc0f72b53ae3f65e3$var$inherits(From, Of); // Clone values.

  result = Of.prototype;

  for (key in result) {
    value = result[key];

    if (value && typeof value === 'object') {
      result[key] = 'concat' in value ? value.concat() : $c6290bbcadbc0f72b53ae3f65e3$var$xtend(value);
    }
  }

  return Of; // Constructor accepting a single argument, which itself is an `arguments`
  // object.

  function From(parameters) {
    return Super.apply(this, parameters);
  } // Constructor accepting variadic arguments.


  function Of() {
    if (!(this instanceof Of)) {
      return new From(arguments);
    }

    return Super.apply(this, arguments);
  }
}