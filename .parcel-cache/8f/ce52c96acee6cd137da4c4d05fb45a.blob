var $a8cc1be6586bf08bb92cdebc1bcc1386$exports = {};
$parcel$require("a8cc1be6586bf08bb92cdebc1bcc1386", "apollo-client");
$parcel$require("a8cc1be6586bf08bb92cdebc1bcc1386", "react");
$parcel$require("a8cc1be6586bf08bb92cdebc1bcc1386", "./ApolloContext");
$parcel$require("a8cc1be6586bf08bb92cdebc1bcc1386", "./internal/SSRContext");
$parcel$require("a8cc1be6586bf08bb92cdebc1bcc1386", "./internal/actHack");
$parcel$require("a8cc1be6586bf08bb92cdebc1bcc1386", "./queryCache");
$parcel$require("a8cc1be6586bf08bb92cdebc1bcc1386", "./utils");

function $a8cc1be6586bf08bb92cdebc1bcc1386$var$_extends() {
  $a8cc1be6586bf08bb92cdebc1bcc1386$var$_extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return $a8cc1be6586bf08bb92cdebc1bcc1386$var$_extends.apply(this, arguments);
}

function $a8cc1be6586bf08bb92cdebc1bcc1386$export$useQuery(query, _temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$ssr = _ref.ssr,
      ssr = _ref$ssr === void 0 ? true : _ref$ssr,
      _ref$skip = _ref.skip,
      skip = _ref$skip === void 0 ? false : _ref$skip,
      _ref$suspend = _ref.suspend,
      suspend = _ref$suspend === void 0 ? false : _ref$suspend,
      pollInterval = _ref.pollInterval,
      _ref$notifyOnNetworkS = _ref.notifyOnNetworkStatusChange,
      notifyOnNetworkStatusChange = _ref$notifyOnNetworkS === void 0 ? false : _ref$notifyOnNetworkS,
      overrideClient = _ref.client,
      context = _ref.context,
      metadata = _ref.metadata,
      variables = _ref.variables,
      actualCachePolicy = _ref.fetchPolicy,
      errorPolicy = _ref.errorPolicy,
      fetchResults = _ref.fetchResults;

  var client = $a8cc1be6586bf08bb92cdebc1bcc1386$import$useApolloClient(overrideClient);
  var ssrManager = $a8cc1be6586bf08bb92cdebc1bcc1386$import$useContext($a8cc1be6586bf08bb92cdebc1bcc1386$import$SSRContext);
  var ssrInUse = ssr && ssrManager; // Skips when `skip: true` or SSRContext passed but `ssr: false`

  var shouldSkip = skip || ssrManager != null && !ssr;
  var fetchPolicy = ssrInUse && ( // Taken from https://github.com/apollographql/react-apollo/blob/2d7e48b7d0c26e792e1ed26e98bb84d8fba5bb8a/src/Query.tsx#L167-L169
  actualCachePolicy === 'network-only' || actualCachePolicy === 'cache-and-network') ? 'cache-first' : actualCachePolicy;
  var watchQueryOptions = $a8cc1be6586bf08bb92cdebc1bcc1386$import$useMemo(function () {
    return $a8cc1be6586bf08bb92cdebc1bcc1386$import$compact({
      context: context,
      errorPolicy: errorPolicy,
      fetchPolicy: fetchPolicy,
      fetchResults: fetchResults,
      metadata: metadata,
      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,
      pollInterval: pollInterval,
      query: query,
      variables: variables
    });
  }, [query, pollInterval, notifyOnNetworkStatusChange, context && $a8cc1be6586bf08bb92cdebc1bcc1386$import$objToKey(context), metadata && $a8cc1be6586bf08bb92cdebc1bcc1386$import$objToKey(metadata), variables && $a8cc1be6586bf08bb92cdebc1bcc1386$import$objToKey(variables), fetchPolicy, errorPolicy, fetchResults]);
  var observableQuery = $a8cc1be6586bf08bb92cdebc1bcc1386$import$useMemo(function () {
    return $a8cc1be6586bf08bb92cdebc1bcc1386$import$getCachedObservableQuery(client, watchQueryOptions);
  }, [client, watchQueryOptions]);

  var _useState = $a8cc1be6586bf08bb92cdebc1bcc1386$import$useState(0),
      responseId = _useState[0],
      setResponseId = _useState[1];

  var currentResult = $a8cc1be6586bf08bb92cdebc1bcc1386$import$useMemo(function () {
    var helpers = {
      fetchMore: observableQuery.fetchMore.bind(observableQuery),
      refetch: observableQuery.refetch.bind(observableQuery),
      startPolling: observableQuery.startPolling.bind(observableQuery),
      stopPolling: observableQuery.stopPolling.bind(observableQuery),
      updateQuery: observableQuery.updateQuery.bind(observableQuery)
    };
    var result = observableQuery.currentResult(); // return the old result data when there is an error

    var data = result.data;

    if (result.error || result.errors) {
      data = $a8cc1be6586bf08bb92cdebc1bcc1386$var$_extends({}, result.data, (observableQuery.getLastResult() || {}).data);
    }

    if (shouldSkip) {
      // Taken from https://github.com/apollographql/react-apollo/blob/5cb63b3625ce5e4a3d3e4ba132eaec2a38ef5d90/src/Query.tsx#L376-L381
      return $a8cc1be6586bf08bb92cdebc1bcc1386$var$_extends({}, helpers, {
        data: undefined,
        error: undefined,
        loading: false,
        networkStatus: undefined
      });
    }

    return $a8cc1be6586bf08bb92cdebc1bcc1386$var$_extends({}, helpers, {
      data: data,
      error: result.errors && result.errors.length > 0 ? new $a8cc1be6586bf08bb92cdebc1bcc1386$import$ApolloError({
        graphQLErrors: result.errors
      }) : result.error,
      errors: result.errors,
      loading: result.loading,
      // don't try to return `networkStatus` when suspense it's used
      // because it's unreliable in that case
      // https://github.com/trojanowski/react-apollo-hooks/pull/68
      networkStatus: suspend ? undefined : result.networkStatus,
      partial: result.partial
    });
  }, [shouldSkip, responseId, observableQuery]);
  $a8cc1be6586bf08bb92cdebc1bcc1386$import$useEffect(function () {
    if (shouldSkip) {
      return;
    }

    var invalidateCurrentResult = function invalidateCurrentResult() {
      // A hack to get rid React warnings during tests. The default
      // implementation of `actHack` just invokes the callback immediately.
      // In tests, it's replaced with `act` from react-testing-library.
      // A better solution welcome.
      $a8cc1be6586bf08bb92cdebc1bcc1386$import$actHack(function () {
        setResponseId(function (x) {
          return x + 1;
        });
      });
    };

    var subscription = observableQuery.subscribe(invalidateCurrentResult, invalidateCurrentResult);
    $a8cc1be6586bf08bb92cdebc1bcc1386$import$invalidateCachedObservableQuery(client, watchQueryOptions);
    return function () {
      subscription.unsubscribe();
    };
  }, [shouldSkip, observableQuery]);
  $a8cc1be6586bf08bb92cdebc1bcc1386$var$ensureSupportedFetchPolicy(suspend, fetchPolicy);

  if (currentResult.partial) {
    if (suspend) {
      // throw a promise - use the react suspense to wait until the data is
      // available
      throw observableQuery.result();
    }

    if (ssrInUse) {
      ssrManager.register(observableQuery.result());
    }
  }

  return currentResult;
}

$a8cc1be6586bf08bb92cdebc1bcc1386$exports.useQuery = $a8cc1be6586bf08bb92cdebc1bcc1386$export$useQuery;

function $a8cc1be6586bf08bb92cdebc1bcc1386$var$ensureSupportedFetchPolicy(suspend, fetchPolicy) {
  if (suspend && fetchPolicy && fetchPolicy !== 'cache-first') {
    throw new Error("Fetch policy " + fetchPolicy + " is not supported without 'suspend: false'");
  }
}