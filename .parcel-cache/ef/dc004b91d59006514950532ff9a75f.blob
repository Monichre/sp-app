var $e205c46065961c12de476ed07118a90a$exports = {};
var $e205c46065961c12de476ed07118a90a$var$bind = $parcel$require("e205c46065961c12de476ed07118a90a", "../internals/bind-context");
var $e205c46065961c12de476ed07118a90a$var$IndexedObject = $parcel$require("e205c46065961c12de476ed07118a90a", "../internals/indexed-object");
var $e205c46065961c12de476ed07118a90a$var$toObject = $parcel$require("e205c46065961c12de476ed07118a90a", "../internals/to-object");
var $e205c46065961c12de476ed07118a90a$var$toLength = $parcel$require("e205c46065961c12de476ed07118a90a", "../internals/to-length");
var $e205c46065961c12de476ed07118a90a$var$arraySpeciesCreate = $parcel$require("e205c46065961c12de476ed07118a90a", "../internals/array-species-create"); // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
// 0 -> Array#forEach
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
// 1 -> Array#map
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// 2 -> Array#filter
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// 3 -> Array#some
// https://tc39.github.io/ecma262/#sec-array.prototype.some
// 4 -> Array#every
// https://tc39.github.io/ecma262/#sec-array.prototype.every
// 5 -> Array#find
// https://tc39.github.io/ecma262/#sec-array.prototype.find
// 6 -> Array#findIndex
// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex

$e205c46065961c12de476ed07118a90a$exports = function (TYPE, specificCreate) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = specificCreate || $e205c46065961c12de476ed07118a90a$var$arraySpeciesCreate;
  return function ($this, callbackfn, that) {
    var O = $e205c46065961c12de476ed07118a90a$var$toObject($this);
    var self = $e205c46065961c12de476ed07118a90a$var$IndexedObject(O);
    var boundFunction = $e205c46065961c12de476ed07118a90a$var$bind(callbackfn, that, 3);
    var length = $e205c46065961c12de476ed07118a90a$var$toLength(self.length);
    var index = 0;
    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var value, result;

    for (; length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);

      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
            case 3:
              return true;
            // some

            case 5:
              return value;
            // find

            case 6:
              return index;
            // findIndex

            case 2:
              target.push(value);
            // filter
          } else if (IS_EVERY) return false; // every
      }
    }

    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};