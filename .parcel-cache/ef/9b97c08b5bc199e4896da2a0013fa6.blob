var $d24097ba13a647b68881fe69cdd63e$exports = {};
var $d24097ba13a647b68881fe69cdd63e$var$openCloseTag = $parcel$require("09d24097ba13a647b68881fe69cdd63e", "../util/html").openCloseTag;
$d24097ba13a647b68881fe69cdd63e$exports = $d24097ba13a647b68881fe69cdd63e$var$blockHTML;
var $d24097ba13a647b68881fe69cdd63e$var$C_TAB = '\t';
var $d24097ba13a647b68881fe69cdd63e$var$C_SPACE = ' ';
var $d24097ba13a647b68881fe69cdd63e$var$C_NEWLINE = '\n';
var $d24097ba13a647b68881fe69cdd63e$var$C_LT = '<';

function $d24097ba13a647b68881fe69cdd63e$var$blockHTML(eat, value, silent) {
  var self = this;
  var blocks = self.options.blocks;
  var length = value.length;
  var index = 0;
  var next;
  var line;
  var offset;
  var character;
  var count;
  var sequence;
  var subvalue;
  var sequences = [[/^<(script|pre|style)(?=(\s|>|$))/i, /<\/(script|pre|style)>/i, true], [/^<!--/, /-->/, true], [/^<\?/, /\?>/, true], [/^<![A-Za-z]/, />/, true], [/^<!\[CDATA\[/, /\]\]>/, true], [new RegExp('^</?(' + blocks.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true], [new RegExp($d24097ba13a647b68881fe69cdd63e$var$openCloseTag.source + '\\s*$'), /^$/, false]];
  /* Eat initial spacing. */

  while (index < length) {
    character = value.charAt(index);

    if (character !== $d24097ba13a647b68881fe69cdd63e$var$C_TAB && character !== $d24097ba13a647b68881fe69cdd63e$var$C_SPACE) {
      break;
    }

    index++;
  }

  if (value.charAt(index) !== $d24097ba13a647b68881fe69cdd63e$var$C_LT) {
    return;
  }

  next = value.indexOf($d24097ba13a647b68881fe69cdd63e$var$C_NEWLINE, index + 1);
  next = next === -1 ? length : next;
  line = value.slice(index, next);
  offset = -1;
  count = sequences.length;

  while (++offset < count) {
    if (sequences[offset][0].test(line)) {
      sequence = sequences[offset];
      break;
    }
  }

  if (!sequence) {
    return;
  }

  if (silent) {
    return sequence[2];
  }

  index = next;

  if (!sequence[1].test(line)) {
    while (index < length) {
      next = value.indexOf($d24097ba13a647b68881fe69cdd63e$var$C_NEWLINE, index + 1);
      next = next === -1 ? length : next;
      line = value.slice(index + 1, next);

      if (sequence[1].test(line)) {
        if (line) {
          index = next;
        }

        break;
      }

      index = next;
    }
  }

  subvalue = value.slice(0, index);
  return eat(subvalue)({
    type: 'html',
    value: subvalue
  });
}