var $f72d7481f6936dfd7d24f09e5d96e$exports = {};
var $f72d7481f6936dfd7d24f09e5d96e$var$wrap = $parcel$require("158f72d7481f6936dfd7d24f09e5d96e", "./wrap.js");
$f72d7481f6936dfd7d24f09e5d96e$exports = $f72d7481f6936dfd7d24f09e5d96e$var$trough;
$f72d7481f6936dfd7d24f09e5d96e$var$trough.wrap = $f72d7481f6936dfd7d24f09e5d96e$var$wrap;
var $f72d7481f6936dfd7d24f09e5d96e$var$slice = [].slice; // Create new middleware.

function $f72d7481f6936dfd7d24f09e5d96e$var$trough() {
  var fns = [];
  var middleware = {};
  middleware.run = run;
  middleware.use = use;
  return middleware; // Run `fns`.  Last argument must be a completion handler.

  function run() {
    var index = -1;
    var input = $f72d7481f6936dfd7d24f09e5d96e$var$slice.call(arguments, 0, -1);
    var done = arguments[arguments.length - 1];

    if (typeof done !== 'function') {
      throw new Error('Expected function as last argument, not ' + done);
    }

    next.apply(null, [null].concat(input)); // Run the next `fn`, if any.

    function next(err) {
      var fn = fns[++index];
      var params = $f72d7481f6936dfd7d24f09e5d96e$var$slice.call(arguments, 0);
      var values = params.slice(1);
      var length = input.length;
      var pos = -1;

      if (err) {
        done(err);
        return;
      } // Copy non-nully input into values.


      while (++pos < length) {
        if (values[pos] === null || values[pos] === undefined) {
          values[pos] = input[pos];
        }
      }

      input = values; // Next or done.

      if (fn) {
        $f72d7481f6936dfd7d24f09e5d96e$var$wrap(fn, next).apply(null, input);
      } else {
        done.apply(null, [null].concat(input));
      }
    }
  } // Add `fn` to the list.


  function use(fn) {
    if (typeof fn !== 'function') {
      throw new Error('Expected `fn` to be a function, not ' + fn);
    }

    fns.push(fn);
    return middleware;
  }
}