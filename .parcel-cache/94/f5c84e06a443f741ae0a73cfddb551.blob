var $a7bf96ead10eb28efa210a295837287$exports = {};
Object.defineProperty($a7bf96ead10eb28efa210a295837287$exports, '__esModule', {
  value: true
});

function $a7bf96ead10eb28efa210a295837287$var$_interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var $a7bf96ead10eb28efa210a295837287$var$firebase = $a7bf96ead10eb28efa210a295837287$var$_interopDefault($parcel$require("7a7bf96ead10eb28efa210a295837287", "@firebase/app"));
var $a7bf96ead10eb28efa210a295837287$var$tslib_1 = $parcel$require("7a7bf96ead10eb28efa210a295837287", "tslib");
var $a7bf96ead10eb28efa210a295837287$var$util = $parcel$require("7a7bf96ead10eb28efa210a295837287", "@firebase/util");
$parcel$require("7a7bf96ead10eb28efa210a295837287", "@firebase/installations");
var $a7bf96ead10eb28efa210a295837287$var$logger$1 = $parcel$require("7a7bf96ead10eb28efa210a295837287", "@firebase/logger");
/**
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var $a7bf96ead10eb28efa210a295837287$var$SDK_VERSION = '0.2.1';
/** The prefix for start User Timing marks used for creating Traces. */

var $a7bf96ead10eb28efa210a295837287$var$TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';
/** The prefix for stop User Timing marks used for creating Traces. */

var $a7bf96ead10eb28efa210a295837287$var$TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';
/** The prefix for User Timing measure used for creating Traces. */

var $a7bf96ead10eb28efa210a295837287$var$TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';
/** The prefix for out of the box page load Trace name. */

var $a7bf96ead10eb28efa210a295837287$var$OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';
var $a7bf96ead10eb28efa210a295837287$var$FIRST_PAINT_COUNTER_NAME = '_fp';
var $a7bf96ead10eb28efa210a295837287$var$FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';
var $a7bf96ead10eb28efa210a295837287$var$FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';
var $a7bf96ead10eb28efa210a295837287$var$CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';
var $a7bf96ead10eb28efa210a295837287$var$CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';
var $a7bf96ead10eb28efa210a295837287$var$SERVICE = 'performance';
var $a7bf96ead10eb28efa210a295837287$var$SERVICE_NAME = 'Performance';
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var $a7bf96ead10eb28efa210a295837287$var$_a;
var $a7bf96ead10eb28efa210a295837287$var$ERROR_DESCRIPTION_MAP = ($a7bf96ead10eb28efa210a295837287$var$_a = {}, $a7bf96ead10eb28efa210a295837287$var$_a["trace started"
/* TRACE_STARTED_BEFORE */
] = 'Trace {$traceName} was started before.', $a7bf96ead10eb28efa210a295837287$var$_a["trace stopped"
/* TRACE_STOPPED_BEFORE */
] = 'Trace {$traceName} is not running.', $a7bf96ead10eb28efa210a295837287$var$_a["no window"
/* NO_WINDOW */
] = 'Window is not available.', $a7bf96ead10eb28efa210a295837287$var$_a["no app id"
/* NO_APP_ID */
] = 'App id is not available.', $a7bf96ead10eb28efa210a295837287$var$_a["no project id"
/* NO_PROJECT_ID */
] = 'Project id is not available.', $a7bf96ead10eb28efa210a295837287$var$_a["no api key"
/* NO_API_KEY */
] = 'Api key is not available.', $a7bf96ead10eb28efa210a295837287$var$_a["invalid cc log"
/* INVALID_CC_LOG */
] = 'Attempted to queue invalid cc event', $a7bf96ead10eb28efa210a295837287$var$_a["FB not default"
/* FB_NOT_DEFAULT */
] = 'Performance can only start when Firebase app instance is the default one.', $a7bf96ead10eb28efa210a295837287$var$_a["RC response not ok"
/* RC_NOT_OK */
] = 'RC response is not ok', $a7bf96ead10eb28efa210a295837287$var$_a);
var $a7bf96ead10eb28efa210a295837287$var$ERROR_FACTORY = new $a7bf96ead10eb28efa210a295837287$var$util.ErrorFactory($a7bf96ead10eb28efa210a295837287$var$SERVICE, $a7bf96ead10eb28efa210a295837287$var$SERVICE_NAME, $a7bf96ead10eb28efa210a295837287$var$ERROR_DESCRIPTION_MAP);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var $a7bf96ead10eb28efa210a295837287$var$apiInstance;
var $a7bf96ead10eb28efa210a295837287$var$windowInstance;
/**
 * This class holds a reference to various browser related objects injected by set methods.
 */

var $a7bf96ead10eb28efa210a295837287$var$Api =
/** @class */
function () {
  function Api(window) {
    if (!window) {
      throw $a7bf96ead10eb28efa210a295837287$var$ERROR_FACTORY.create("no window"
      /* NO_WINDOW */
      );
    }

    this.performance = window.performance;
    this.PerformanceObserver = window.PerformanceObserver;
    this.windowLocation = window.location;
    this.navigator = window.navigator;
    this.document = window.document;
    this.localStorage = window.localStorage;

    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {
      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;
    }
  }

  Api.prototype.getUrl = function () {
    // Do not capture the string query part of url.
    return this.windowLocation.href.split('?')[0];
  };

  Api.prototype.mark = function (name) {
    if (!this.performance || !this.performance.mark) return;
    this.performance.mark(name);
  };

  Api.prototype.measure = function (measureName, mark1, mark2) {
    if (!this.performance || !this.performance.measure) return;
    this.performance.measure(measureName, mark1, mark2);
  };

  Api.prototype.getEntriesByType = function (type) {
    if (!this.performance || !this.performance.getEntriesByType) return [];
    return this.performance.getEntriesByType(type);
  };

  Api.prototype.getEntriesByName = function (name) {
    if (!this.performance || !this.performance.getEntriesByName) return [];
    return this.performance.getEntriesByName(name);
  };

  Api.prototype.getTimeOrigin = function () {
    // Polyfill the time origin with performance.timing.navigationStart.
    return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);
  };

  Api.prototype.setupObserver = function (entryType, callback) {
    if (!this.PerformanceObserver) return;
    var observer = new this.PerformanceObserver(function (list) {
      for (var _i = 0, _a = list.getEntries(); _i < _a.length; _i++) {
        var entry = _a[_i]; // `entry` is a PerformanceEntry instance.

        callback(entry);
      }
    }); // Start observing the entry types you care about.

    observer.observe({
      entryTypes: [entryType]
    });
  };

  Api.getInstance = function () {
    if ($a7bf96ead10eb28efa210a295837287$var$apiInstance === undefined) {
      $a7bf96ead10eb28efa210a295837287$var$apiInstance = new Api($a7bf96ead10eb28efa210a295837287$var$windowInstance);
    }

    return $a7bf96ead10eb28efa210a295837287$var$apiInstance;
  };

  return Api;
}();

function $a7bf96ead10eb28efa210a295837287$var$setupApi(window) {
  $a7bf96ead10eb28efa210a295837287$var$windowInstance = window;
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$settingsServiceInstance;

var $a7bf96ead10eb28efa210a295837287$var$SettingsService =
/** @class */
function () {
  function SettingsService() {
    // The variable which controls logging of automatic traces and HTTP/S network monitoring.
    this.instrumentationEnabled = true; // The variable which controls logging of custom traces.

    this.dataCollectionEnabled = true; // Configuration flags set through remote config.

    this.loggingEnabled = false; // Sampling rate between 0 and 1.

    this.tracesSamplingRate = 1;
    this.networkRequestsSamplingRate = 1; // Address of logging service.

    this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';
    this.logSource = 462; // Flags which control per session logging of traces and network requests.

    this.logTraceAfterSampling = false;
    this.logNetworkAfterSampling = false; // TTL of config retrieved from remote config in hours.

    this.configTimeToLive = 12;
  }

  SettingsService.prototype.getAppId = function () {
    var appId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.appId;

    if (!appId) {
      throw $a7bf96ead10eb28efa210a295837287$var$ERROR_FACTORY.create("no app id"
      /* NO_APP_ID */
      );
    }

    return appId;
  };

  SettingsService.prototype.getProjectId = function () {
    var projectId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.projectId;

    if (!projectId) {
      throw $a7bf96ead10eb28efa210a295837287$var$ERROR_FACTORY.create("no project id"
      /* NO_PROJECT_ID */
      );
    }

    return projectId;
  };

  SettingsService.prototype.getApiKey = function () {
    var apiKey = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.apiKey;

    if (!apiKey) {
      throw $a7bf96ead10eb28efa210a295837287$var$ERROR_FACTORY.create("no api key"
      /* NO_API_KEY */
      );
    }

    return apiKey;
  };

  SettingsService.getInstance = function () {
    if ($a7bf96ead10eb28efa210a295837287$var$settingsServiceInstance === undefined) {
      $a7bf96ead10eb28efa210a295837287$var$settingsServiceInstance = new SettingsService();
    }

    return $a7bf96ead10eb28efa210a295837287$var$settingsServiceInstance;
  };

  return SettingsService;
}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$iid;

function $a7bf96ead10eb28efa210a295837287$var$getIidPromise() {
  var iidPromise = $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().firebaseAppInstance.installations().getId();
  iidPromise.then(function (iidVal) {
    $a7bf96ead10eb28efa210a295837287$var$iid = iidVal;
  });
  return iidPromise;
} // This method should be used after the iid is retrieved by getIidPromise method.


function $a7bf96ead10eb28efa210a295837287$var$getIid() {
  return $a7bf96ead10eb28efa210a295837287$var$iid;
}

function $a7bf96ead10eb28efa210a295837287$var$getAuthTokenPromise() {
  var authTokenPromise = $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().firebaseAppInstance.installations().getToken();
  authTokenPromise.then(function (authTokenVal) {});
  return authTokenPromise;
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$VisibilityState;

(function (VisibilityState) {
  VisibilityState[VisibilityState["UNKNOWN"] = 0] = "UNKNOWN";
  VisibilityState[VisibilityState["VISIBLE"] = 1] = "VISIBLE";
  VisibilityState[VisibilityState["HIDDEN"] = 2] = "HIDDEN";
  VisibilityState[VisibilityState["PRERENDER"] = 3] = "PRERENDER";
  VisibilityState[VisibilityState["UNLOADED"] = 4] = "UNLOADED";
})($a7bf96ead10eb28efa210a295837287$var$VisibilityState || ($a7bf96ead10eb28efa210a295837287$var$VisibilityState = {}));

function $a7bf96ead10eb28efa210a295837287$var$getServiceWorkerStatus() {
  var navigator = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance().navigator;

  if ('serviceWorker' in navigator) {
    if (navigator.serviceWorker.controller) {
      return 2
      /* CONTROLLED */
      ;
    } else {
        return 3
        /* UNCONTROLLED */
        ;
      }
  } else {
      return 1
      /* UNSUPPORTED */
      ;
    }
}

function $a7bf96ead10eb28efa210a295837287$var$getVisibilityState() {
  var document = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance().document;
  var visibilityState = document.visibilityState;

  switch (visibilityState) {
    case 'visible':
      return $a7bf96ead10eb28efa210a295837287$var$VisibilityState.VISIBLE;

    case 'hidden':
      return $a7bf96ead10eb28efa210a295837287$var$VisibilityState.HIDDEN;

    case 'prerender':
      return $a7bf96ead10eb28efa210a295837287$var$VisibilityState.PRERENDER;

    default:
      return $a7bf96ead10eb28efa210a295837287$var$VisibilityState.UNKNOWN;
  }
}

function $a7bf96ead10eb28efa210a295837287$var$getEffectiveConnectionType() {
  var navigator = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance().navigator;
  var navigatorConnection = navigator.connection;
  var effectiveType = navigatorConnection && navigatorConnection.effectiveType;

  switch (effectiveType) {
    case 'slow-2g':
      return 1
      /* CONNECTION_SLOW_2G */
      ;

    case '2g':
      return 2
      /* CONNECTION_2G */
      ;

    case '3g':
      return 3
      /* CONNECTION_3G */
      ;

    case '4g':
      return 4
      /* CONNECTION_4G */
      ;

    default:
      return 0
      /* UNKNOWN */
      ;
  }
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$consoleLogger = new $a7bf96ead10eb28efa210a295837287$var$logger$1.Logger($a7bf96ead10eb28efa210a295837287$var$SERVICE_NAME);
$a7bf96ead10eb28efa210a295837287$var$consoleLogger.logLevel = $a7bf96ead10eb28efa210a295837287$var$logger$1.LogLevel.INFO;
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var $a7bf96ead10eb28efa210a295837287$var$REMOTE_CONFIG_SDK_VERSION = '0.0.1'; // These values will be used if the remote config object is successfully
// retrieved, but the template does not have these fields.

var $a7bf96ead10eb28efa210a295837287$var$SECONDARY_CONFIGS = {
  loggingEnabled: true
};
var $a7bf96ead10eb28efa210a295837287$var$FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';

function $a7bf96ead10eb28efa210a295837287$var$getConfig(iid) {
  var config = $a7bf96ead10eb28efa210a295837287$var$getStoredConfig();

  if (config) {
    $a7bf96ead10eb28efa210a295837287$var$processConfig(config);
    return Promise.resolve();
  }

  return $a7bf96ead10eb28efa210a295837287$var$getRemoteConfig(iid).then(function (config) {
    return $a7bf96ead10eb28efa210a295837287$var$processConfig(config);
  }).then(function (config) {
    return $a7bf96ead10eb28efa210a295837287$var$storeConfig(config);
  },
  /** Do nothing for error, use defaults set in settings service. */
  function () {});
}

function $a7bf96ead10eb28efa210a295837287$var$getStoredConfig() {
  var localStorage = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance().localStorage;
  var expiryString = localStorage.getItem($a7bf96ead10eb28efa210a295837287$var$CONFIG_EXPIRY_LOCAL_STORAGE_KEY);
  if (!expiryString || !$a7bf96ead10eb28efa210a295837287$var$configValid(expiryString)) return;
  var configStringified = localStorage.getItem($a7bf96ead10eb28efa210a295837287$var$CONFIG_LOCAL_STORAGE_KEY);
  if (!configStringified) return;

  try {
    var configResponse = JSON.parse(configStringified);
    return configResponse;
  } catch (_a) {
    return;
  }
}

function $a7bf96ead10eb28efa210a295837287$var$storeConfig(config) {
  if (!config) return;
  var localStorage = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance().localStorage;
  localStorage.setItem($a7bf96ead10eb28efa210a295837287$var$CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));
  localStorage.setItem($a7bf96ead10eb28efa210a295837287$var$CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));
}

var $a7bf96ead10eb28efa210a295837287$var$COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';

function $a7bf96ead10eb28efa210a295837287$var$getRemoteConfig(iid) {
  // Perf needs auth token only to retrieve remote config.
  return $a7bf96ead10eb28efa210a295837287$var$getAuthTokenPromise().then(function (authToken) {
    var projectId = $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().getProjectId();
    var configEndPoint = "https://firebaseremoteconfig.googleapis.com/v1/projects/" + projectId + "/namespaces/fireperf:fetch?key=" + $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().getApiKey();
    var request = new Request(configEndPoint, {
      method: 'POST',
      headers: {
        Authorization: $a7bf96ead10eb28efa210a295837287$var$FIS_AUTH_PREFIX + " " + authToken
      },
      body: JSON.stringify({
        app_instance_id: iid,
        app_instance_id_token: authToken,
        app_id: $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().getAppId(),
        app_version: $a7bf96ead10eb28efa210a295837287$var$SDK_VERSION,
        sdk_version: $a7bf96ead10eb28efa210a295837287$var$REMOTE_CONFIG_SDK_VERSION
      })
    });
    return fetch(request).then(function (response) {
      if (response.ok) {
        return response.json();
      } // In case response is not ok. This will be caught by catch.


      throw $a7bf96ead10eb28efa210a295837287$var$ERROR_FACTORY.create("RC response not ok"
      /* RC_NOT_OK */
      );
    });
  }).catch(function () {
    $a7bf96ead10eb28efa210a295837287$var$consoleLogger.info($a7bf96ead10eb28efa210a295837287$var$COULD_NOT_GET_CONFIG_MSG);
    return undefined;
  });
}
/**
 * Processes config coming either from calling RC or from local storage.
 * This method only runs if call is successful or config in storage
 * is valie.
 */


function $a7bf96ead10eb28efa210a295837287$var$processConfig(config) {
  if (!config) return config;
  var settingsServiceInstance = $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance();
  var entries = config.entries || {};

  if (entries.fpr_enabled !== undefined) {
    // TODO: Change the assignment of loggingEnabled once the received type is known.
    settingsServiceInstance.loggingEnabled = String(entries.fpr_enabled) === 'true';
  } else {
    // Config retrieved successfully, but there is no fpr_enabled in template.
    // Use secondary configs value.
    settingsServiceInstance.loggingEnabled = $a7bf96ead10eb28efa210a295837287$var$SECONDARY_CONFIGS.loggingEnabled;
  }

  if (entries.fpr_log_source) {
    settingsServiceInstance.logSource = Number(entries.fpr_log_source);
  }

  if (entries.fpr_log_endpoint_url) {
    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;
  }

  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {
    settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);
  }

  if (entries.fpr_vc_trace_sampling_rate !== undefined) {
    settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);
  } // Set the per session trace and network logging flags.


  settingsServiceInstance.logTraceAfterSampling = $a7bf96ead10eb28efa210a295837287$var$shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);
  settingsServiceInstance.logNetworkAfterSampling = $a7bf96ead10eb28efa210a295837287$var$shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);
  return config;
}

function $a7bf96ead10eb28efa210a295837287$var$configValid(expiry) {
  return Number(expiry) > Date.now();
}

function $a7bf96ead10eb28efa210a295837287$var$shouldLogAfterSampling(samplingRate) {
  return Math.random() <= samplingRate;
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$initializationStatus = 1
/* notInitialized */
;
var $a7bf96ead10eb28efa210a295837287$var$initializationPromise;

function $a7bf96ead10eb28efa210a295837287$var$getInitializationPromise() {
  $a7bf96ead10eb28efa210a295837287$var$initializationStatus = 2
  /* initializationPending */
  ;
  $a7bf96ead10eb28efa210a295837287$var$initializationPromise = $a7bf96ead10eb28efa210a295837287$var$initializationPromise || $a7bf96ead10eb28efa210a295837287$var$initializePerf();
  return $a7bf96ead10eb28efa210a295837287$var$initializationPromise;
}

function $a7bf96ead10eb28efa210a295837287$var$isPerfInitialized() {
  return $a7bf96ead10eb28efa210a295837287$var$initializationStatus === 3
  /* initialized */
  ;
}

function $a7bf96ead10eb28efa210a295837287$var$initializePerf() {
  return $a7bf96ead10eb28efa210a295837287$var$getDocumentReadyComplete().then(function () {
    return $a7bf96ead10eb28efa210a295837287$var$getIidPromise();
  }).then(function (iid) {
    return $a7bf96ead10eb28efa210a295837287$var$getConfig(iid);
  }).then(function () {
    return $a7bf96ead10eb28efa210a295837287$var$changeInitializationStatus();
  }, function () {
    return $a7bf96ead10eb28efa210a295837287$var$changeInitializationStatus();
  });
}
/**
 * Returns a promise which resolves whenever the document readystate is complete or
 * immediately if it is called after page load complete.
 */


function $a7bf96ead10eb28efa210a295837287$var$getDocumentReadyComplete() {
  var document = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance().document;
  return new Promise(function (resolve) {
    if (document && document.readyState !== 'complete') {
      var handler_1 = function () {
        if (document.readyState === 'complete') {
          document.removeEventListener('readystatechange', handler_1);
          resolve();
        }
      };

      document.addEventListener('readystatechange', handler_1);
    } else {
      resolve();
    }
  });
}

function $a7bf96ead10eb28efa210a295837287$var$changeInitializationStatus() {
  $a7bf96ead10eb28efa210a295837287$var$initializationStatus = 3
  /* initialized */
  ;
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$DEFAULT_SEND_INTERVAL_MS = 10 * 1000;
var $a7bf96ead10eb28efa210a295837287$var$INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000; // If end point does not work, the call will be tried for these many times.

var $a7bf96ead10eb28efa210a295837287$var$DEFAULT_REMAINING_TRIES = 3;
var $a7bf96ead10eb28efa210a295837287$var$remainingTries = $a7bf96ead10eb28efa210a295837287$var$DEFAULT_REMAINING_TRIES;
var $a7bf96ead10eb28efa210a295837287$var$queue = [];

function $a7bf96ead10eb28efa210a295837287$var$processQueue(timeOffset) {
  setTimeout(function () {
    // If there is no remainingTries left, stop retrying.
    if ($a7bf96ead10eb28efa210a295837287$var$remainingTries === 0) {
      return;
    } // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.


    if (!$a7bf96ead10eb28efa210a295837287$var$queue.length) {
      return $a7bf96ead10eb28efa210a295837287$var$processQueue($a7bf96ead10eb28efa210a295837287$var$DEFAULT_SEND_INTERVAL_MS);
    } // Capture a snapshot of the queue and empty the "official queue".


    var staged = $a7bf96ead10eb28efa210a295837287$var$queue.slice();
    $a7bf96ead10eb28efa210a295837287$var$queue = []; // We will pass the JSON serialized event to the backend.

    var log_event = staged.map(function (evt) {
      return {
        source_extension_json: evt.message,
        event_time_ms: String(evt.eventTime)
      };
    });
    var data = {
      request_time_ms: String(Date.now()),
      client_info: {
        client_type: 1,
        js_client_info: {}
      },
      log_source: $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().logSource,
      log_event: log_event
    };
    fetch($a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().logEndPointUrl, {
      method: 'POST',
      body: JSON.stringify(data)
    }).then(function (res) {
      if (!res.ok) {
        $a7bf96ead10eb28efa210a295837287$var$consoleLogger.info('Call to Firebase backend failed.');
      }

      return res.json();
    }).then(function (res) {
      // Find the next call wait time from the response.
      var requestOffset = Math.max($a7bf96ead10eb28efa210a295837287$var$DEFAULT_SEND_INTERVAL_MS, parseInt(res.next_request_wait_millis, 10));
      $a7bf96ead10eb28efa210a295837287$var$remainingTries = $a7bf96ead10eb28efa210a295837287$var$DEFAULT_REMAINING_TRIES; // Schedule the next process.

      $a7bf96ead10eb28efa210a295837287$var$processQueue(requestOffset);
    }).catch(function () {
      /**
       * If the request fails for some reason, add the events that were attempted
       * back to the primary queue to retry later.
       */
      $a7bf96ead10eb28efa210a295837287$var$queue = staged.concat($a7bf96ead10eb28efa210a295837287$var$queue);
      $a7bf96ead10eb28efa210a295837287$var$remainingTries--;
      $a7bf96ead10eb28efa210a295837287$var$consoleLogger.info("Tries left: " + $a7bf96ead10eb28efa210a295837287$var$remainingTries + ".");
      $a7bf96ead10eb28efa210a295837287$var$processQueue($a7bf96ead10eb28efa210a295837287$var$DEFAULT_SEND_INTERVAL_MS);
    });
  }, timeOffset);
}

$a7bf96ead10eb28efa210a295837287$var$processQueue($a7bf96ead10eb28efa210a295837287$var$INITIAL_SEND_TIME_DELAY_MS);

function $a7bf96ead10eb28efa210a295837287$var$addToQueue(evt) {
  if (!evt.eventTime || !evt.message) {
    throw $a7bf96ead10eb28efa210a295837287$var$ERROR_FACTORY.create("invalid cc log"
    /* INVALID_CC_LOG */
    );
  } // Add the new event to the queue.


  $a7bf96ead10eb28efa210a295837287$var$queue = $a7bf96ead10eb28efa210a295837287$var$queue.concat([evt]);
}
/** Log handler for cc service to send the performance logs to the server. */


function $a7bf96ead10eb28efa210a295837287$var$ccHandler(serializer) {
  // The underscores for loggerInstance and level parameters are added to avoid the
  // noUnusedParameters related error.
  return function (_loggerInstance, _level) {
    var args = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }

    var message = serializer.apply(void 0, args);
    $a7bf96ead10eb28efa210a295837287$var$addToQueue({
      message: message,
      eventTime: Date.now()
    });
  };
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$logger; // This method is not called before initialization.

function $a7bf96ead10eb28efa210a295837287$var$getLogger() {
  if ($a7bf96ead10eb28efa210a295837287$var$logger) return $a7bf96ead10eb28efa210a295837287$var$logger;
  var ccLogger = $a7bf96ead10eb28efa210a295837287$var$ccHandler($a7bf96ead10eb28efa210a295837287$var$serializer);
  $a7bf96ead10eb28efa210a295837287$var$logger = new $a7bf96ead10eb28efa210a295837287$var$logger$1.Logger('@firebase/performance/cc');
  $a7bf96ead10eb28efa210a295837287$var$logger.logHandler = ccLogger;
  return $a7bf96ead10eb28efa210a295837287$var$logger;
}

function $a7bf96ead10eb28efa210a295837287$var$logTrace(trace) {
  var settingsService = $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance(); // Do not log if trace is auto generated and instrumentation is disabled.

  if (!settingsService.instrumentationEnabled && trace.isAuto) return; // Do not log if trace is custom and data collection is disabled.

  if (!settingsService.dataCollectionEnabled && !trace.isAuto) return; // Only log the page load auto traces if page is visible.

  if (trace.isAuto && $a7bf96ead10eb28efa210a295837287$var$getVisibilityState() !== $a7bf96ead10eb28efa210a295837287$var$VisibilityState.VISIBLE) return;
  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) return;

  if ($a7bf96ead10eb28efa210a295837287$var$isPerfInitialized()) {
    $a7bf96ead10eb28efa210a295837287$var$sendTraceLog(trace);
  } else {
    // Custom traces can be used before the initialization but logging
    // should wait until after.
    $a7bf96ead10eb28efa210a295837287$var$getInitializationPromise().then(function () {
      return $a7bf96ead10eb28efa210a295837287$var$sendTraceLog(trace);
    }, function () {
      return $a7bf96ead10eb28efa210a295837287$var$sendTraceLog(trace);
    });
  }
}

function $a7bf96ead10eb28efa210a295837287$var$sendTraceLog(trace) {
  if ($a7bf96ead10eb28efa210a295837287$var$getIid()) {
    setTimeout(function () {
      return $a7bf96ead10eb28efa210a295837287$var$getLogger().log(trace, 1
      /* Trace */
      );
    }, 0);
  }
}

function $a7bf96ead10eb28efa210a295837287$var$logNetworkRequest(networkRequest) {
  var settingsService = $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance(); // Do not log network requests if instrumentation is disabled.

  if (!settingsService.instrumentationEnabled) return; // Do not log the js sdk's call to cc service to avoid unnecessary cycle.

  if (networkRequest.url === settingsService.logEndPointUrl.split('?')[0]) return;
  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) return;
  setTimeout(function () {
    return $a7bf96ead10eb28efa210a295837287$var$getLogger().log(networkRequest, 0
    /* NetworkRequest */
    );
  }, 0);
}

function $a7bf96ead10eb28efa210a295837287$var$serializer(resource, resourceType) {
  if (resourceType === 0
  /* NetworkRequest */
  ) {
      return $a7bf96ead10eb28efa210a295837287$var$serializeNetworkRequest(resource);
    }

  return $a7bf96ead10eb28efa210a295837287$var$serializeTrace(resource);
}

function $a7bf96ead10eb28efa210a295837287$var$serializeNetworkRequest(networkRequest) {
  var networkRequestMetric = {
    url: networkRequest.url,
    http_method: 1,
    http_response_code: 200,
    response_payload_bytes: networkRequest.responsePayloadBytes,
    client_start_time_us: networkRequest.startTimeUs,
    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,
    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs
  };
  var perfMetric = {
    application_info: $a7bf96ead10eb28efa210a295837287$var$getApplicationInfo(),
    network_request_metric: networkRequestMetric
  };
  return JSON.stringify(perfMetric);
}

function $a7bf96ead10eb28efa210a295837287$var$serializeTrace(trace) {
  var traceMetric = {
    name: trace.name,
    is_auto: trace.isAuto,
    client_start_time_us: trace.startTimeUs,
    duration_us: trace.durationUs
  };

  if (Object.keys(trace.counters).length !== 0) {
    traceMetric.counters = $a7bf96ead10eb28efa210a295837287$var$convertToKeyValueArray(trace.counters);
  }

  var customAttributes = trace.getAttributes();

  if (Object.keys(customAttributes).length !== 0) {
    traceMetric.custom_attributes = $a7bf96ead10eb28efa210a295837287$var$convertToKeyValueArray(customAttributes);
  }

  var perfMetric = {
    application_info: $a7bf96ead10eb28efa210a295837287$var$getApplicationInfo(),
    trace_metric: traceMetric
  };
  return JSON.stringify(perfMetric);
}

function $a7bf96ead10eb28efa210a295837287$var$getApplicationInfo() {
  return {
    google_app_id: $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().getAppId(),
    app_instance_id: $a7bf96ead10eb28efa210a295837287$var$getIid(),
    web_app_info: {
      sdk_version: $a7bf96ead10eb28efa210a295837287$var$SDK_VERSION,
      page_url: $a7bf96ead10eb28efa210a295837287$var$Api.getInstance().getUrl(),
      service_worker_status: $a7bf96ead10eb28efa210a295837287$var$getServiceWorkerStatus(),
      visibility_state: $a7bf96ead10eb28efa210a295837287$var$getVisibilityState(),
      effective_connection_type: $a7bf96ead10eb28efa210a295837287$var$getEffectiveConnectionType()
    },
    application_process_state: 0
  };
}

function $a7bf96ead10eb28efa210a295837287$var$convertToKeyValueArray(obj) {
  var keys = Object.keys(obj);
  return keys.map(function (key) {
    return {
      key: key,
      value: obj[key]
    };
  });
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$Trace =
/** @class */
function () {
  /**
   * @param name The name of the trace.
   * @param isAuto If the trace is auto-instrumented.
   * @param traceMeasureName The name of the measure marker in user timing specification. This field
   * is only set when the trace is built for logging when the user directly uses the user timing
   * api (performance.mark and performance.measure).
   */
  function Trace(name, isAuto, traceMeasureName) {
    if (isAuto === void 0) {
      isAuto = false;
    }

    this.name = name;
    this.isAuto = isAuto;
    this.state = 1
    /* UNINITIALIZED */
    ;
    this.customAttributes = {};
    this.counters = {};
    this.api = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance();
    this.randomId = Math.floor(Math.random() * 1000000);

    if (!this.isAuto) {
      this.traceStartMark = $a7bf96ead10eb28efa210a295837287$var$TRACE_START_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
      this.traceStopMark = $a7bf96ead10eb28efa210a295837287$var$TRACE_STOP_MARK_PREFIX + "-" + this.randomId + "-" + this.name;
      this.traceMeasure = traceMeasureName || $a7bf96ead10eb28efa210a295837287$var$TRACE_MEASURE_PREFIX + "-" + this.randomId + "-" + this.name;

      if (traceMeasureName) {
        // For the case of direct user timing traces, no start stop will happen. The measure object
        // is already available.
        this.calculateTraceMetrics();
      }
    }
  }
  /**
   * Starts a trace. The measurement of the duration starts at this point.
   */


  Trace.prototype.start = function () {
    if (this.state !== 1
    /* UNINITIALIZED */
    ) {
        throw $a7bf96ead10eb28efa210a295837287$var$ERROR_FACTORY.create("trace started"
        /* TRACE_STARTED_BEFORE */
        , {
          traceName: this.name
        });
      }

    this.api.mark(this.traceStartMark);
    this.state = 2
    /* RUNNING */
    ;
  };
  /**
   * Stops the trace. The measurement of the duration of the trace stops at this point and trace
   * is logged.
   */


  Trace.prototype.stop = function () {
    if (this.state !== 2
    /* RUNNING */
    ) {
        throw $a7bf96ead10eb28efa210a295837287$var$ERROR_FACTORY.create("trace stopped"
        /* TRACE_STOPPED_BEFORE */
        , {
          traceName: this.name
        });
      }

    this.state = 3
    /* TERMINATED */
    ;
    this.api.mark(this.traceStopMark);
    this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);
    this.calculateTraceMetrics();
    $a7bf96ead10eb28efa210a295837287$var$logTrace(this);
  };
  /**
   * Records a trace with predetermined values. If this method is used a trace is created and logged
   * directly. No need to use start and stop methods.
   * @param startTime Trace start time since epoch in millisec
   * @param duration The duraction of the trace in millisec
   * @param options An object which can optionally hold maps of custom metrics and custom attributes
   */


  Trace.prototype.record = function (startTime, duration, options) {
    this.durationUs = Math.floor(duration * 1000);
    this.startTimeUs = Math.floor(startTime * 1000);

    if (options && options.attributes) {
      this.customAttributes = $a7bf96ead10eb28efa210a295837287$var$tslib_1.__assign({}, options.attributes);
    }

    if (options && options.metrics) {
      for (var _i = 0, _a = Object.keys(options.metrics); _i < _a.length; _i++) {
        var metric = _a[_i];

        if (!isNaN(Number(options.metrics[metric]))) {
          this.counters[metric] = Number(Math.floor(options.metrics[metric]));
        }
      }
    }

    $a7bf96ead10eb28efa210a295837287$var$logTrace(this);
  };
  /**
   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new
   * custom metric if one with the given name does not exist.
   * @param counter Name of the custom metric
   * @param num Increment by value
   */


  Trace.prototype.incrementMetric = function (counter, num) {
    if (num === void 0) {
      num = 1;
    }

    if (this.counters[counter] === undefined) {
      this.counters[counter] = 0;
    }

    this.counters[counter] += num;
  };
  /**
   * Sets a custom metric to a specified value. Will create a new custom metric if one with the
   * given name does not exist.
   * @param counter Name of the custom metric
   * @param num Set custom metric to this value
   */


  Trace.prototype.putMetric = function (counter, num) {
    this.counters[counter] = num;
  };
  /**
   * Returns the value of the custom metric by that name. If a custom metric with that name does
   * not exist will return zero.
   * @param counter
   */


  Trace.prototype.getMetric = function (counter) {
    return this.counters[counter] || 0;
  };
  /**
   * Sets a custom attribute of a trace to a certain value.
   * @param attr
   * @param value
   */


  Trace.prototype.putAttribute = function (attr, value) {
    this.customAttributes[attr] = value;
  };
  /**
   * Retrieves the value a custom attribute of a trace is set to.
   * @param attr
   */


  Trace.prototype.getAttribute = function (attr) {
    return this.customAttributes[attr];
  };

  Trace.prototype.removeAttribute = function (attr) {
    if (this.customAttributes[attr] === undefined) return;
    delete this.customAttributes[attr];
  };

  Trace.prototype.getAttributes = function () {
    return $a7bf96ead10eb28efa210a295837287$var$tslib_1.__assign({}, this.customAttributes);
  };

  Trace.prototype.setStartTime = function (startTime) {
    this.startTimeUs = startTime;
  };

  Trace.prototype.setDuration = function (duration) {
    this.durationUs = duration;
  };
  /**
   * Calculates and assigns the duration and start time of the trace using the measure performance
   * entry.
   */


  Trace.prototype.calculateTraceMetrics = function () {
    var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);
    var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];

    if (perfMeasureEntry) {
      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);
      this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);
    }
  };
  /**
   * @param navigationTimings A single element array which contains the navigationTIming object of
   * the page load
   * @param paintTimings A array which contains paintTiming object of the page load
   * @param firstInputDelay First input delay in millisec
   */


  Trace.createOobTrace = function (navigationTimings, paintTimings, firstInputDelay) {
    var route = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance().getUrl();
    if (!route) return;
    var trace = new Trace($a7bf96ead10eb28efa210a295837287$var$OOB_TRACE_PAGE_LOAD_PREFIX + route, true);
    var timeOriginUs = Math.floor($a7bf96ead10eb28efa210a295837287$var$Api.getInstance().getTimeOrigin() * 1000);
    trace.setStartTime(timeOriginUs); // navigationTimings includes only one element.

    if (navigationTimings && navigationTimings[0]) {
      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));
      trace.incrementMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));
      trace.incrementMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));
      trace.incrementMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));
    }

    var FIRST_PAINT = 'first-paint';
    var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';

    if (paintTimings) {
      var firstPaint = paintTimings.find(function (paintObject) {
        return paintObject.name === FIRST_PAINT;
      });

      if (firstPaint && firstPaint.startTime) {
        trace.incrementMetric($a7bf96ead10eb28efa210a295837287$var$FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));
      }

      var firstContentfulPaint = paintTimings.find(function (paintObject) {
        return paintObject.name === FIRST_CONTENTFUL_PAINT;
      });

      if (firstContentfulPaint && firstContentfulPaint.startTime) {
        trace.incrementMetric($a7bf96ead10eb28efa210a295837287$var$FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));
      }

      if (firstInputDelay) {
        trace.incrementMetric($a7bf96ead10eb28efa210a295837287$var$FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));
      }
    }

    $a7bf96ead10eb28efa210a295837287$var$logTrace(trace);
  };

  Trace.createUserTimingTrace = function (measureName) {
    var trace = new Trace(measureName, false, measureName);
    $a7bf96ead10eb28efa210a295837287$var$logTrace(trace);
  };

  return Trace;
}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function $a7bf96ead10eb28efa210a295837287$var$createNetworkRequestEntry(entry) {
  var performanceEntry = entry;
  if (!performanceEntry || performanceEntry.responseStart === undefined) return;
  var timeOrigin = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance().getTimeOrigin();
  var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);
  var timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;
  var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000); // Remove the query params from logged network request url.

  var url = performanceEntry.name && performanceEntry.name.split('?')[0];
  var networkRequest = {
    url: url,
    responsePayloadBytes: performanceEntry.transferSize,
    startTimeUs: startTimeUs,
    timeToResponseInitiatedUs: timeToResponseInitiatedUs,
    timeToResponseCompletedUs: timeToResponseCompletedUs
  };
  $a7bf96ead10eb28efa210a295837287$var$logNetworkRequest(networkRequest);
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$FID_WAIT_TIME_MS = 5000;

function $a7bf96ead10eb28efa210a295837287$var$setupOobResources() {
  // Do not initialize unless iid is available.
  if (!$a7bf96ead10eb28efa210a295837287$var$getIid()) return; // The load event might not have fired yet, and that means performance navigation timing
  // object has a duration of 0. The setup should run after all current tasks in js queue.

  setTimeout(function () {
    return $a7bf96ead10eb28efa210a295837287$var$setupOobTraces();
  }, 0);
  setTimeout(function () {
    return $a7bf96ead10eb28efa210a295837287$var$setupNetworkRequests();
  }, 0);
  setTimeout(function () {
    return $a7bf96ead10eb28efa210a295837287$var$setupUserTimingTraces();
  }, 0);
}

function $a7bf96ead10eb28efa210a295837287$var$setupNetworkRequests() {
  var api = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance();
  var resources = api.getEntriesByType('resource');

  for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {
    var resource = resources_1[_i];
    $a7bf96ead10eb28efa210a295837287$var$createNetworkRequestEntry(resource);
  }

  api.setupObserver('resource', $a7bf96ead10eb28efa210a295837287$var$createNetworkRequestEntry);
}

function $a7bf96ead10eb28efa210a295837287$var$setupOobTraces() {
  var api = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance();
  var navigationTimings = api.getEntriesByType('navigation');
  var paintTimings = api.getEntriesByType('paint'); // If First Input Desly polyfill is added to the page, report the fid value.
  // https://github.com/GoogleChromeLabs/first-input-delay

  if (api.onFirstInputDelay) {
    // If the fid call back is not called for certain time, continue without it.
    var timeoutId_1 = setTimeout(function () {
      $a7bf96ead10eb28efa210a295837287$var$Trace.createOobTrace(navigationTimings, paintTimings);
      timeoutId_1 = undefined;
    }, $a7bf96ead10eb28efa210a295837287$var$FID_WAIT_TIME_MS);
    api.onFirstInputDelay(function (fid) {
      if (timeoutId_1) {
        clearTimeout(timeoutId_1);
        $a7bf96ead10eb28efa210a295837287$var$Trace.createOobTrace(navigationTimings, paintTimings, fid);
      }
    });
  } else {
    $a7bf96ead10eb28efa210a295837287$var$Trace.createOobTrace(navigationTimings, paintTimings);
  }
}

function $a7bf96ead10eb28efa210a295837287$var$setupUserTimingTraces() {
  var api = $a7bf96ead10eb28efa210a295837287$var$Api.getInstance(); // Run through the measure performance entries collected up to this point.

  var measures = api.getEntriesByType('measure');

  for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {
    var measure = measures_1[_i];
    $a7bf96ead10eb28efa210a295837287$var$createUserTimingTrace(measure);
  } // Setup an observer to capture the measures from this point on.


  api.setupObserver('measure', $a7bf96ead10eb28efa210a295837287$var$createUserTimingTrace);
}

function $a7bf96ead10eb28efa210a295837287$var$createUserTimingTrace(measure) {
  var measureName = measure.name; // Do not create a trace, if the user timing marks and measures are created by the sdk itself.

  if (measureName.substring(0, $a7bf96ead10eb28efa210a295837287$var$TRACE_MEASURE_PREFIX.length) === $a7bf96ead10eb28efa210a295837287$var$TRACE_MEASURE_PREFIX) return;
  $a7bf96ead10eb28efa210a295837287$var$Trace.createUserTimingTrace(measureName);
}
/**
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$PerformanceController =
/** @class */
function () {
  function PerformanceController(app) {
    this.app = app;
    $a7bf96ead10eb28efa210a295837287$var$getInitializationPromise().then($a7bf96ead10eb28efa210a295837287$var$setupOobResources, $a7bf96ead10eb28efa210a295837287$var$setupOobResources);
  }

  PerformanceController.prototype.trace = function (name) {
    return new $a7bf96ead10eb28efa210a295837287$var$Trace(name);
  };

  Object.defineProperty(PerformanceController.prototype, "instrumentationEnabled", {
    get: function () {
      return $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().instrumentationEnabled;
    },
    set: function (val) {
      $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().instrumentationEnabled = val;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(PerformanceController.prototype, "dataCollectionEnabled", {
    get: function () {
      return $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().dataCollectionEnabled;
    },
    set: function (val) {
      $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().dataCollectionEnabled = val;
    },
    enumerable: true,
    configurable: true
  });
  return PerformanceController;
}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var $a7bf96ead10eb28efa210a295837287$var$DEFAULT_ENTRY_NAME = '[DEFAULT]';

function $a7bf96ead10eb28efa210a295837287$var$registerPerformance(instance) {
  var factoryMethod = function (app) {
    if (app.name !== $a7bf96ead10eb28efa210a295837287$var$DEFAULT_ENTRY_NAME) {
      throw $a7bf96ead10eb28efa210a295837287$var$ERROR_FACTORY.create("FB not default"
      /* FB_NOT_DEFAULT */
      );
    }

    $a7bf96ead10eb28efa210a295837287$var$SettingsService.getInstance().firebaseAppInstance = app;
    return new $a7bf96ead10eb28efa210a295837287$var$PerformanceController(app);
  }; // Register performance with firebase-app.


  var namespaceExports = {};
  instance.INTERNAL.registerService('performance', factoryMethod, namespaceExports);
}

if (window && fetch && Promise) {
  $a7bf96ead10eb28efa210a295837287$var$setupApi(window);
  $a7bf96ead10eb28efa210a295837287$var$registerPerformance($a7bf96ead10eb28efa210a295837287$var$firebase);
} else {
  $a7bf96ead10eb28efa210a295837287$var$consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise.');
}

var $a7bf96ead10eb28efa210a295837287$export$registerPerformance = $a7bf96ead10eb28efa210a295837287$var$registerPerformance;
$a7bf96ead10eb28efa210a295837287$exports.registerPerformance = $a7bf96ead10eb28efa210a295837287$export$registerPerformance; //# sourceMappingURL=index.cjs.js.map