var $b28a839586b7692d42981ceaf8b4e$exports = {};
$parcel$require("538b28a839586b7692d42981ceaf8b4e", "tslib");
$parcel$require("538b28a839586b7692d42981ceaf8b4e", "apollo-client");
$parcel$require("538b28a839586b7692d42981ceaf8b4e", "apollo-link");
$parcel$require("538b28a839586b7692d42981ceaf8b4e", "apollo-cache-inmemory");
$parcel$require("538b28a839586b7692d42981ceaf8b4e", "apollo-link-http");
$parcel$require("538b28a839586b7692d42981ceaf8b4e", "apollo-link-http");
$parcel$require("538b28a839586b7692d42981ceaf8b4e", "apollo-link-error");
$parcel$require("538b28a839586b7692d42981ceaf8b4e", "graphql-tag");
$parcel$require("538b28a839586b7692d42981ceaf8b4e", "ts-invariant");
$parcel$exportWildcard($b28a839586b7692d42981ceaf8b4e$exports, $parcel$require("538b28a839586b7692d42981ceaf8b4e", "apollo-client"));
$parcel$exportWildcard($b28a839586b7692d42981ceaf8b4e$exports, $parcel$require("538b28a839586b7692d42981ceaf8b4e", "apollo-link"));
$parcel$exportWildcard($b28a839586b7692d42981ceaf8b4e$exports, $parcel$require("538b28a839586b7692d42981ceaf8b4e", "apollo-cache-inmemory"));
$b28a839586b7692d42981ceaf8b4e$exports.HttpLink = $b28a839586b7692d42981ceaf8b4e$import$HttpLink;
$b28a839586b7692d42981ceaf8b4e$exports.gql = $b28a839586b7692d42981ceaf8b4e$import$gql;
var $b28a839586b7692d42981ceaf8b4e$var$PRESET_CONFIG_KEYS = ['request', 'uri', 'credentials', 'headers', 'fetch', 'fetchOptions', 'clientState', 'onError', 'cacheRedirects', 'cache', 'name', 'version', 'resolvers', 'typeDefs', 'fragmentMatcher'];

var $b28a839586b7692d42981ceaf8b4e$export$default = function (_super) {
  $b28a839586b7692d42981ceaf8b4e$import$__extends(DefaultClient, _super);

  function DefaultClient(config) {
    if (config === void 0) {
      config = {};
    }

    var _this = this;

    if (config) {
      var diff = Object.keys(config).filter(function (key) {
        return $b28a839586b7692d42981ceaf8b4e$var$PRESET_CONFIG_KEYS.indexOf(key) === -1;
      });

      if (diff.length > 0) {
        "production" === "production" || $b28a839586b7692d42981ceaf8b4e$import$invariant.warn('ApolloBoost was initialized with unsupported options: ' + ("" + diff.join(' ')));
      }
    }

    var request = config.request,
        uri = config.uri,
        credentials = config.credentials,
        headers = config.headers,
        fetch = config.fetch,
        fetchOptions = config.fetchOptions,
        clientState = config.clientState,
        cacheRedirects = config.cacheRedirects,
        errorCallback = config.onError,
        name = config.name,
        version = config.version,
        resolvers = config.resolvers,
        typeDefs = config.typeDefs,
        fragmentMatcher = config.fragmentMatcher;
    var cache = config.cache;
    "production" === "production" ? $b28a839586b7692d42981ceaf8b4e$import$invariant(!cache || !cacheRedirects) : $b28a839586b7692d42981ceaf8b4e$import$invariant(!cache || !cacheRedirects, 'Incompatible cache configuration. If providing `cache` then ' + 'configure the provided instance with `cacheRedirects` instead.');

    if (!cache) {
      cache = cacheRedirects ? new $b28a839586b7692d42981ceaf8b4e$import$InMemoryCache({
        cacheRedirects: cacheRedirects
      }) : new $b28a839586b7692d42981ceaf8b4e$import$InMemoryCache();
    }

    var errorLink = errorCallback ? $b28a839586b7692d42981ceaf8b4e$import$onError(errorCallback) : $b28a839586b7692d42981ceaf8b4e$import$onError(function (_a) {
      var graphQLErrors = _a.graphQLErrors,
          networkError = _a.networkError;

      if (graphQLErrors) {
        graphQLErrors.map(function (_a) {
          var message = _a.message,
              locations = _a.locations,
              path = _a.path;
          return "production" === "production" || $b28a839586b7692d42981ceaf8b4e$import$invariant.warn("[GraphQL error]: Message: " + message + ", Location: " + (locations + ", Path: " + path));
        });
      }

      if (networkError) {
        "production" === "production" || $b28a839586b7692d42981ceaf8b4e$import$invariant.warn("[Network error]: " + networkError);
      }
    });
    var requestHandler = request ? new $b28a839586b7692d42981ceaf8b4e$import$ApolloLink(function (operation, forward) {
      return new $b28a839586b7692d42981ceaf8b4e$import$Observable(function (observer) {
        var handle;
        Promise.resolve(operation).then(function (oper) {
          return request(oper);
        }).then(function () {
          handle = forward(operation).subscribe({
            next: observer.next.bind(observer),
            error: observer.error.bind(observer),
            complete: observer.complete.bind(observer)
          });
        }).catch(observer.error.bind(observer));
        return function () {
          if (handle) {
            handle.unsubscribe();
          }
        };
      });
    }) : false;
    var httpLink = new $b28a839586b7692d42981ceaf8b4e$import$HttpLink({
      uri: uri || '/graphql',
      fetch: fetch,
      fetchOptions: fetchOptions || {},
      credentials: credentials || 'same-origin',
      headers: headers || {}
    });
    var link = $b28a839586b7692d42981ceaf8b4e$import$ApolloLink.from([errorLink, requestHandler, httpLink].filter(function (x) {
      return !!x;
    }));
    var activeResolvers = resolvers;
    var activeTypeDefs = typeDefs;
    var activeFragmentMatcher = fragmentMatcher;

    if (clientState) {
      if (clientState.defaults) {
        cache.writeData({
          data: clientState.defaults
        });
      }

      activeResolvers = clientState.resolvers;
      activeTypeDefs = clientState.typeDefs;
      activeFragmentMatcher = clientState.fragmentMatcher;
    }

    _this = _super.call(this, {
      cache: cache,
      link: link,
      name: name,
      version: version,
      resolvers: activeResolvers,
      typeDefs: activeTypeDefs,
      fragmentMatcher: activeFragmentMatcher
    }) || this;
    return _this;
  }

  return DefaultClient;
}($b28a839586b7692d42981ceaf8b4e$import$ApolloClient__default);

$b28a839586b7692d42981ceaf8b4e$exports.default = $b28a839586b7692d42981ceaf8b4e$export$default;