var $bd788c5024c7232ff8b5e1fd93cf0705$exports = {};
Object.defineProperty($bd788c5024c7232ff8b5e1fd93cf0705$exports, "__esModule", {
  value: true
});
var $bd788c5024c7232ff8b5e1fd93cf0705$export$default = $bd788c5024c7232ff8b5e1fd93cf0705$var$defineToStringTag;
$bd788c5024c7232ff8b5e1fd93cf0705$exports.default = $bd788c5024c7232ff8b5e1fd93cf0705$export$default;
/**
 * The `defineToStringTag()` function checks first to see if the runtime
 * supports the `Symbol` class and then if the `Symbol.toStringTag` constant
 * is defined as a `Symbol` instance. If both conditions are met, the
 * Symbol.toStringTag property is defined as a getter that returns the
 * supplied class constructor's name.
 *
 * @method defineToStringTag
 *
 * @param {Class<any>} classObject a class such as Object, String, Number but
 * typically one of your own creation through the class keyword; `class A {}`,
 * for example.
 */

function $bd788c5024c7232ff8b5e1fd93cf0705$var$defineToStringTag(classObject) {
  if (typeof Symbol === 'function' && Symbol.toStringTag) {
    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {
      get: function get() {
        return this.constructor.name;
      }
    });
  }
}