var $ee4d627af2042bde60d14cc03107392$exports = {};
$parcel$require("7ee4d627af2042bde60d14cc03107392", "is-what");

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function $ee4d627af2042bde60d14cc03107392$var$__spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}

function $ee4d627af2042bde60d14cc03107392$var$assignProp(carry, key, newVal, originalObject) {
  var propType = originalObject.propertyIsEnumerable(key) ? 'enumerable' : 'nonenumerable';
  if (propType === 'enumerable') carry[key] = newVal;

  if (propType === 'nonenumerable') {
    Object.defineProperty(carry, key, {
      value: newVal,
      enumerable: false,
      writable: true,
      configurable: true
    });
  }
}

function $ee4d627af2042bde60d14cc03107392$var$mergeRecursively(origin, newComer, extensions) {
  // work directly on newComer if its not an object
  if (!$ee4d627af2042bde60d14cc03107392$import$isPlainObject(newComer)) {
    // extend merge rules
    if (extensions && $ee4d627af2042bde60d14cc03107392$import$isArray(extensions)) {
      extensions.forEach(function (extend) {
        newComer = extend(origin, newComer);
      });
    }

    return newComer;
  } // define newObject to merge all values upon


  var newObject = {};

  if ($ee4d627af2042bde60d14cc03107392$import$isPlainObject(origin)) {
    var props_1 = Object.getOwnPropertyNames(origin);
    var symbols_1 = Object.getOwnPropertySymbols(origin);
    newObject = $ee4d627af2042bde60d14cc03107392$var$__spreadArrays(props_1, symbols_1).reduce(function (carry, key) {
      // @ts-ignore
      var targetVal = origin[key];

      if (!$ee4d627af2042bde60d14cc03107392$import$isSymbol(key) && !Object.getOwnPropertyNames(newComer).includes(key) || $ee4d627af2042bde60d14cc03107392$import$isSymbol(key) && !Object.getOwnPropertySymbols(newComer).includes(key)) {
        $ee4d627af2042bde60d14cc03107392$var$assignProp(carry, key, targetVal, origin);
      }

      return carry;
    }, {});
  }

  var props = Object.getOwnPropertyNames(newComer);
  var symbols = Object.getOwnPropertySymbols(newComer);
  var result = $ee4d627af2042bde60d14cc03107392$var$__spreadArrays(props, symbols).reduce(function (carry, key) {
    // re-define the origin and newComer as targetVal and newVal
    var newVal = newComer[key];
    var targetVal = $ee4d627af2042bde60d14cc03107392$import$isPlainObject(origin) ? // @ts-ignore
    origin[key] : undefined; // extend merge rules

    if (extensions && $ee4d627af2042bde60d14cc03107392$import$isArray(extensions)) {
      extensions.forEach(function (extend) {
        newVal = extend(targetVal, newVal);
      });
    } // When newVal is an object do the merge recursively


    if (targetVal !== undefined && $ee4d627af2042bde60d14cc03107392$import$isPlainObject(newVal)) {
      newVal = $ee4d627af2042bde60d14cc03107392$var$mergeRecursively(targetVal, newVal, extensions);
    }

    $ee4d627af2042bde60d14cc03107392$var$assignProp(carry, key, newVal, newComer);
    return carry;
  }, newObject);
  return result;
}
/**
 * Merge anything recursively.
 * Objects get merged, special objects (classes etc.) are re-assigned "as is".
 * Basic types overwrite objects or other basic types.
 *
 * @param {(IConfig | any)} origin
 * @param {...any[]} newComers
 * @returns the result
 */


function $ee4d627af2042bde60d14cc03107392$export$default(origin) {
  var newComers = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    newComers[_i - 1] = arguments[_i];
  }

  var extensions = null;
  var base = origin;

  if ($ee4d627af2042bde60d14cc03107392$import$isPlainObject(origin) && origin.extensions && Object.keys(origin).length === 1) {
    base = {};
    extensions = origin.extensions;
  }

  return newComers.reduce(function (result, newComer) {
    return $ee4d627af2042bde60d14cc03107392$var$mergeRecursively(result, newComer, extensions);
  }, base);
}

function $ee4d627af2042bde60d14cc03107392$export$concatArrays(originVal, newVal) {
  if ($ee4d627af2042bde60d14cc03107392$import$isArray(originVal) && $ee4d627af2042bde60d14cc03107392$import$isArray(newVal)) {
    // concat logic
    return originVal.concat(newVal);
  }

  return newVal; // always return newVal as fallback!!
}

$ee4d627af2042bde60d14cc03107392$exports.default = $ee4d627af2042bde60d14cc03107392$export$default;
$ee4d627af2042bde60d14cc03107392$exports.merge = $ee4d627af2042bde60d14cc03107392$export$default;
$ee4d627af2042bde60d14cc03107392$exports.concatArrays = $ee4d627af2042bde60d14cc03107392$export$concatArrays;